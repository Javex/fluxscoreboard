#!/usr/bin/env python2
import argparse
import os
import subprocess
import sys


def print_colored(msg, color):
    colors = {'red': 31, 'green': 32, 'yellow': 33, 'blue': 34, 'magenta': 35,
              'cyan': 36, 'white': 37}
    if color not in colors:
        raise KeyError('Unknown color %s. Options: %s' % (color, colors.keys()))
    print('\033[%dm%s\033[0m' % (colors[color], msg))


def error(msg):
    print_colored('[!] Error: ' + msg, 'red')
    sys.exit(1)


def info(msg):
    print_colored('[-] Info: ' + msg, 'cyan')


def warn(msg):
    print_colored('[^] Warning: ' + msg, 'magenta')


def execute_visibly(*cmd):
    info('Executing: %s' % ' '.join(cmd))
    subprocess.check_call(cmd)


def ask_for(desc, default):
    data = raw_input('Please enter %s [%s]: ' % (desc, default))
    return data if data else default


def _install_requirements(is_dev, root_path=''):
    try:
        reqs_path = os.path.join(root_path, 'cfg', 'requirements.txt')
        execute_visibly('pip', 'install', '-r', reqs_path)
        if is_dev:
            devreqs_path = os.path.join(root_path, 'cfg',
                                        'requirements-dev.txt')
            execute_visibly('pip', 'install', '-r', devreqs_path)
    except subprocess.CalledProcessError:
        error('pip could not install the requirements.')


def _create_configuration(template, mode, root_path=''):
    file_path = os.path.join(root_path, 'cfg', '%s.ini' % mode)
    info('Creating %s configuration now (%s).' % (mode, file_path))
    tvars = {'mode': mode, 'session_secret': os.urandom(20).encode('hex'),
             'db_user': '', 'db_pass': '', 'db_name': ''}
    if mode in ('test', 'development'):
        tvars['db_user'] = ask_for('a database username', 'root')
        tvars['db_pass'] = ask_for('the user\'s password', '')
        tvars['db_name'] = ask_for('a database name', 'scoreboard')
    with open(file_path, 'w+') as f:
        f.write(template.render(**tvars))
    return file_path


def _install_configuration(is_dev, root_path=''):
    import mako.template  # import here because it was not installed before
    template_path = os.path.join(root_path, 'cfg', 'cfg.ini.mako')
    template = mako.template.Template(filename=template_path)
    if is_dev:
        cfg_path = _create_configuration(template, 'development', root_path)
        warn('Do not use the same database for development and test as this '
             'may lead to unexpected behaviour.')
        _create_configuration(template, 'test', root_path)
    else:
        cfg_path = _create_configuration(template, 'production', root_path)
    return cfg_path


def _load_configuration(cfg_path):
    import paste.deploy.loadwsgi  # import here because was not installed before
    return paste.deploy.loadwsgi.appconfig('config:' + cfg_path)


def _create_directories(dirs, root_path=''):
    for d in dirs:
        try:
            os.makedirs(os.path.join(root_path, d))
        except OSError:
            # directory already exists
            pass


def _initialize_logging(cfg_path):
    import pyramid.paster  # import here because was not installed before
    with open(os.path.join('log', 'scoreboard.log'), 'w') as f:
        os.utime(f.name, None)
    pyramid.paster.setup_logging(cfg_path + '#loggers')


def _initialize_database(is_dev, cfg_path, settings):
    import sqlalchemy.engine  # import here because was not installed before
    import fluxscoreboard.models
    import fluxscoreboard.install
    engine = sqlalchemy.engine.engine_from_config(settings, 'sqlalchemy.')
    fluxscoreboard.models.DBSession.configure(bind=engine)
    fluxscoreboard.install.install(settings, cfg_path, test_data=is_dev)


def install(mode='production', root_path=''):
    is_dev = True if mode == 'development' else False
    info('Scoreboard wil be installed in %s mode.' % mode)  # needs sexy mode

    info('Gathering requirements...')
    _install_requirements(is_dev, root_path)

    info('Creating configuration files...')
    cfg_path = _install_configuration(is_dev, root_path)
    settings = _load_configuration(cfg_path)

    info('Creating all required directories...')
    dirs = ('tmp', 'log', 'fluxscoreboard/static/images/avatars')
    _create_directories(dirs, root_path)

    info('Initializing logging...')
    _initialize_logging(cfg_path)

    info('Setting up database...')
    _initialize_database(is_dev, cfg_path, settings)

    if is_dev:
        info('It should work now. You may want to start with running all unit '
             'tests (./run tests).')
    else:
        warn('Since you are deploying in production, please take care of all '
             'configuration by yourself. It is located in %s.' % cfg_path)


def serve(root_path=''):
    cfg_path = os.path.join(root_path, 'cfg', 'development.ini')
    if not os.path.isfile(cfg_path):
        error('%s does not exist. Please execute ./run install development '
              'first.' % cfg_path)
    execute_visibly('pserve', cfg_path)


if __name__ == '__main__':
    desc = 'Your one-time-stop-shop for the scoreboard <(^_^<)'
    parser = argparse.ArgumentParser(description=desc)
    parser.add_argument('--no-venv', dest='check_venv', default=True,
                        action='store_false',
                        help='Do not check if virtual environment present.')
    subparsers = parser.add_subparsers(title='subcommands')

    i_parser = subparsers.add_parser('install', help='Install the application.')
    i_parser.add_argument('mode', metavar='MODE',
                          type=str, choices=('production', 'development'),
                          help='Either production or development.')
    i_parser.set_defaults(function=install)

    s_parser = subparsers.add_parser('serve',
                                     help='Serve web app on port 6543.')
    s_parser.set_defaults(function=serve)

    args = parser.parse_args()
    if (args.check_venv and not hasattr(sys, 'real_prefix')
                        and not hasattr(sys, 'base_prefix')):
        error('Probably not executing in a virtual environment. Pass the '
              '--no-venv parameter to suppress this error.')
    args = vars(args)
    del args['check_venv']
    function = args.pop('function')
    args['root_path'] = os.path.abspath(os.path.dirname(__file__))
    function(**args)
